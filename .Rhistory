head(big_area_iris)
df <- iris[seq(2,150,2),]
head(df)
# 2.  Create a new object called iris_chr which is a copy of iris, except where every column is a character class
iris_chr <- iris
for(i in 1:ncol(iris_chr)){
iris_chr[,i] <- as.character(iris_chr[,i])
}
# 3.  Create a new numeric vector object named "Sepal.Area" which is the product of Sepal.Length and Sepal.Width
Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
class(Sepal.Area)
# 4.  Add Sepal.Area to the iris data frame as a new column
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
head(iris)
# 5.  Create a new dataframe that is a subset of iris using only rows where Sepal.Area is greater than 20
# (name it big_area_iris)
big_area_iris <- iris[Sepal.Area > 20,]
head(big_area_iris)
#### Characters Practice Week 3 ####
library(tidyverse)
length(vector)
nchar(vector)
class(vector)
class(vector)
nchar(vector)
# exercise 2
x <- c("open", "Sesame")
y <- c("You", "Suck.")
nchar(x)
vector <- ("Good morning! ")
nchar(vector)
# exercise 2
x <- c("Open", "Sesame ")
y <- c("You", "Suck.")
nchar(x) # creates a vector with the two lengths
nchar(c(x,y))
#### Sequences Practice Week 3 ####
# exercise 1
seq(1,10,by=2)
seq(1,10,by=3)
#exercise 2
seq(9,45,9)
#exercise 3
seq(1,12,length.out=5)
?seq()
seq(1,10,length.out=3)
# exercise 4
x = 1:5
rep(x,2)
rep(x,2,each=2)
rep(x,each=4)
#### Indexing Practice Week 3 ####
# exercise 1
x = c("ss","aa","ff","kk","bb")
x[1]
x[c(1,3)]
# exercise 2
d = data.frame(Name = c("Betty","Bob","Susan"),
Age = seq(20,30,length.out=3),
Height_cm = c(490,22,0))
d
d[c("Name","Age")]
d[c("Age","Name","Height_cm")][1,]
# exercise 3
d$Name
d$Age[2]
# exercise 4
d$Age > 20
d[d$Age > 20]
d[d$Age > 20,]
#### Missing Values Practice Week 3 ####
# exercise 1
X = c(NA,3,14,NA,33,17,NA,41)
is.na(x)
is.na(X)
X = c(NA,3,14,NA,33,17,NA,41)
is.na(X)
X[!is.na(X)]
#### Loops Practice Week 3 ####
# exercise 1
for(i in 1:3){
x <- paste0("Number",i)
print(x)
}
x <- paste0("Number",i)
#### Loops Practice Week 3 ####
# exercise 1
for(i in 1:3){
x <- paste0("Number",i)
print(x)
}
planets <- c("Mercury","Venus","Earth","Mars",
"Jupiter","Saturn","Uranus","Neptune")
n <- 1
newVector <- c()
for(i in planets){
newVector[n] <- paste0(i,i)
n=n+1
}
newVector
?paste0
for(i in 1:7){
print(i^3)
}
install.packages("tidyverse")
installed.packages()
install.packages("tidyverse")
library(tidyverse)
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point()
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point() +
geom_smooth()
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point() +
geom_smooth(method="lm") #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point() +
geom_smooth(method="lm",color="black") #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",color="black") #defualt, loess curve
geom_smooth(method="lm",color="black") #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE)
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) +
geom_smooth(method="lm",color="black") #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) +
geom_smooth(method="lm",color="black",alpha=.1) #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) +
geom_smooth(method="lm",color="black",linetype=2) #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
group=1,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) +
geom_smooth(method="lm",color="black",linetype=2,alpha=.1) #defualt, loess curve
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) + #defualt, loess curve
scale_color_viridis_d()
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) + #defualt, loess curve
scale_color_viridis_d() +
theme_minimal()
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) + #defualt, loess curve
scale_color_viridis_d() +
theme_minimal() +
labs(x="Petal Length",
y="Petal Width")
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) + #defualt, loess curve
scale_color_viridis_d() +
theme_minimal() +
labs(x="Petal Length",
y="Petal Width",
color="Species of Iris"
)
# give it a data frame
# map column names to various aspects of plot.
# give it geoms (things to draw)
ggplot(iris,aes(x=Petal.Length,
y=Petal.Width,
color=Species)) +
geom_point(alpha=.25) +
geom_smooth(method="lm",se=FALSE) + #defualt, loess curve
scale_color_viridis_d() +
theme_minimal() +
labs(x="Petal Length",
y="Petal Width",
color="Species of Iris") +
facet_wrap(~Species)
mpg
ggplot(mpg,aes(x=year,
y=cty,
color=manufacturer))
ggplot(mpg,aes(x=year,
y=cty,
color=manufacturer))+
geom_point()
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point()
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point() +
facet_wrap(manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point() +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=cyl,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=trans,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
geom_smooth() +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
geom_smooth(method=lm) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
geom_smooth(method=lm,se=FALSE) +
facet_wrap(~manufacturer)
ggplot(mpg,aes(x=hwy,
y=cty,
color=manufacturer))+
geom_point(alpha=.5) +
geom_smooth(method=lm,se=FALSE) +
facet_wrap(~trans)
# Load ggplot2 (it is included in the tidyverse package) ####
library(tidyverse)
# Load the data we will work with (built-in to ggplot)
data("midwest", package = "ggplot2")
# Letâ€™s initialize a basic ggplot based on the midwest dataset that we loaded.
ggplot(midwest) # what do you see?
# give it some aesthetics to work with...
ggplot(midwest, aes(x=area, y=poptotal))  # area and poptotal are columns in 'midwest'
options(scipen=999)
# give it some aesthetics to work with...
ggplot(midwest, aes(x=area, y=poptotal))  # area and poptotal are columns in 'midwest'
# Give it a geom to map to your defined aesthetics... Basic Scatterplot, in this case:
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() # The "+" tells ggplot to add another layer to our base plot
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method = "lm")
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method = "lm", color="red")
# Add another geom ... a trendline:
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method = "lm", color="red", linetype=2)
# Store your plot as an object to add to...
p <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method = "lm")
class(p)
p
# Zoom in
p + lims(x=c(0,0.1),y=c(0,1000000)) # what did this do?
p + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) # how is this different?
# this helps to add layers
# Store this new zoomed-in plot
p2 <- p + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))
# Add Title and Labels:
p2 + labs(title="Area Vs Population",
subtitle="From midwest dataset",
y="Population",
x="Area",
caption="Midwest Demographics")
# Change color of points and line to static values:
ggplot(midwest, aes(x=area, y=poptotal)) + # these are the global aesthetics for the rest of the line - can be overwritten later
geom_point(color="steelblue",size=3) + # geompoint has inherited the global aesthetics from above
geom_smooth(method="lm",color="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Here's where ggplot gets really cool...
# Suppose if we want the color to change based on another column in the source dataset,
# we can specify "color" inside the "aesthetic" aes() function.
p3 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Don't like those colors?
p3 + scale_color_brewer(palette = "Set1")
mycolor <- c("#c1593c","#688e52","#a17fc1","#8997b2","#c4a113")
p3 + scale_color_manual(values=mycolor)
# Want more color choices? You can check them out in the RColorBrewer package, or even make your own
library(RColorBrewer)
brewer.pal.info
intall.packages("carData")
install.packages("carData")
# Geoms for looking at a single variable's distribution:
library(carData)
data("MplsStops")
ggplot(MplsStops, aes(x=lat)) + geom_histogram() + labs(title = "Latitude of police stops in Minneapolis - 2017")
#### Exam 1 ####
data <- read.csv("cleaned_covid_data.csv")
data <- read.csv("practice.csv")
View(data)
View(data)
ggplot(data, aes(x=heterogametic.lifespan, y=GS.Male.Mb))
import(tidyverse)
library(tidyverse)
ggplot(data, aes(x=heterogametic.lifespan, y=GS.Male.Mb))
ggplot(data, aes(x=heterogametic.lifespan, y=GS.Male.Mb)) +
geom_point()
library(tidyverse)
data <- read.csv("practice.csv")
ggplot(data, aes(x=heterogametic.lifespan, y=GS.Male.Mb)) +
geom_point()
library(tidyverse)
data <- read.csv("practice.csv")
ggplot(data, aes(x=heterogametic.lifespan, y=GS.Male.Mb)) +
geom_point()
ggplot(data, aes(x=lnRRlifespan, y=GS.Male.Mb)) +
geom_point()
ggplot(data, aes(x=GS.Male.Mb, y=lnRRlifespan,)) +
geom_point()
ggplot(data, aes(x=GS.Fem.pg - GS.Male.Mb, y=lnRRlifespan,)) +
geom_point()
library(tidyverse)
data <- read.csv("fake_dance_data.csv")
data <- read.csv("assignments/assignment1fake_dance_data.csv")
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
View(data)
ggplot(data, aes(x=DanceGenre)) +
geom_hist()
ggplot(data, aes(x=DanceGenre)) +
geom_histogram()
ggplot(data, aes(x=DanceGenre, stat="count")) +
geom_histogram()
ggplot(data, aes(x=InjuryType, y=RecoveryLength)) +
geom_point()
ggplot(data, aes(x=InjuryType, y=RecoveryLength)) +
geom_bar()
ggplot(data, aes(x=InjuryType, y=DanceGenre)) +
geom_bar()
ggplot(data, aes(x=InjuryType, y=PainScale)) +
geom_bar()
class(data$PainScale)
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=InjuryType, y=PainScale)) +
geom_bar()
ggplot(data, aes(x=InjuryType)) +
geom_bar()
ggplot(data, aes(x=InjuryType)) +
geom_point()
ggplot(data, aes(x=InjuryType)) +
geom_histogram()
ggplot(data, aes(x=InjuryType, y=PainScale)) +
geom_point()
ggplot(data, aes(x=InjuryType, y=PainScale)) +
geom_bar()
class(data$InjuryType)
class(data$PainScale)
ggplot(data, aes(x=InjuryType, y=PainScale)) +
geom_bar(stat="identity")
ggplot(data, aes(x=InjuryType, ..count..)) +
geom_bar(aes(fill = PainScale), position = "dodge")
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge")
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
library(tidyverse)
data <- read.csv("Assignments/Assignment_4/fake_dance_data.csv")
data$PainScale <- as.numeric(data$PainScale)
ggplot(data, aes(x=DanceGenre, ..count..)) +
geom_bar(aes(fill = InjuryType), position = "dodge") +
facet_wrap(~DanceGenre, scales = "free")
