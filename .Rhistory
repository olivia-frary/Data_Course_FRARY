# we want to pivot all the blood pressures together
df <-
df %>% pivot_longer(starts_with("bp_"), values_to = "bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
pivot_longer(starts_with("hr_"),
names_to = "visit2",
values_to = "heart_rate")
# we want to pivot all the blood pressures together
df <-
df %>% pivot_longer(starts_with("bp_"), values_to = "bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3))
path <- "./Data/Messy_bp.xlsx"
# the data starts lower so we're not going to see column names
# data starts on A4 and ends on M24
# range lets you fix what is shown
df <- read_xlsx(path, range = "A4:M24") %>% clean_names()
# this can be used later to get the names of the visits
visits <- read_xlsx(path, skip = 2,n_max = 0) %>% names()
df %>%
select(-starts_with("hr_")) # for picking columns
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3))
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3))
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"))
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"))
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE)
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "bp_9" ~ 1,
name == "bp_11" ~ 2,
name == "bp_13" ~ 3))
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3))
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
full_join(bp,hr)
hr <-
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
full_join(bp,hr)
# now join the two data frames
dat <-
full_join(bp,hr)
View(dat)
# add a date data type column *referene posix ct -> y-m-d
dat %>%
mutate(birthdate = paste(year_birth, month_of_birth, day_birth, separate = "-") %>% as.POSIXct())
# add a date data type column *referene posix ct -> y-m-d
dat %>%
mutate(birthdate = paste(year_birth, month_of_birth, day_birth, sep = "-") %>%
as.POSIXct())
# add a date data type column *referene posix ct -> y-m-d
dat <-
dat %>%
mutate(birthdate = paste(year_birth, month_of_birth, day_birth, sep = "-") %>%
as.POSIXct())
saveRDS()
saveRDS(dat,"./notes/cleaned.bp.rds")
readRDS("./notes/cleaded_bp.rds")
readRDS("./notes/cleaned_bp.rds")
readRDS("./notes/cleaned.bp.rds")
saveRDS(dat,"./notes/cleaned_bp.rds")
library(tidyverse)
library(janitor)
library(readxl)
path <- "./Data/Messy_bp.xlsx"
# the data starts lower so we're not going to see column names
# data starts on A4 and ends on M24
# range lets you fix what is shown
df <- read_xlsx(path, range = "A4:M24") %>% clean_names()
# this can be used later to get the names of the visits
# visits <- read_xlsx(path, skip = 2,n_max = 0) %>% names()
# we want to pivot all the blood pressures together
# df <-
# df %>% pivot_longer(starts_with("bp_"), values_to =) %>%
#   mutate(visit = case_when(name == "bp_8" ~ 1,
#                            name == "bp_10" ~ 2,
#                            name == "bp_12" ~ 3)) %>%
#   pivot_longer(starts_with("hr_"),
#                names_to = "visit2",
#                values_to = "heart_rate")
# make a data frame with just the bp values
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE)
# make data frame with just the hr values
hr <-
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
dat <-
full_join(bp,hr)
# add a date data type column *referene posix ct -> y-m-d
dat <-
dat %>%
mutate(birthdate = paste(year_birth,
month_of_birth,
day_birth,
sep = "-") %>%
as.POSIXct())
saveRDS(dat,"./notes/cleaned_bp.rds")
dat <- readRDS("./notes/cleaned_bp.rds")
names(dat)
library(GGally)
dat %>%
ggpairs()
ggpairs()
# part of (GGally), gets an initial look at the data
dat %>%
select(-c(pat_id, month_of_birth, day_birth, year_birth)) %>%
ggpairs()
dat %>%
ggplot(aes(x=visit,color=hispanic)) +
geom_path(aes(y=systolic),color="black") +
geom_path(aes(y=diastolic),color="black")
dat %>%
ggplot(aes(x=visit,linetype=hispanic)) +
geom_path(aes(y=systolic),color="black") +
geom_path(aes(y=diastolic),color="black")
dat %>%
ggplot(aes(x=visit)) +
geom_path(aes(y=systolic),color="black") +
geom_path(aes(y=diastolic),color="black")
dat %>%
ggplot(aes(x=visit)) +
geom_path(aes(y=systolic),color="red") +
geom_path(aes(y=diastolic),color="black")
dat %>%
ggplot(aes(x=visit)) +
geom_path(aes(y=systolic),color="red") +
geom_path(aes(y=diastolic),color="black") +
facet_wrap(~hispanic)
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
facet_wrap(~hispanic)
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~hispanic)
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~sex)
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~race)
library(tidyverse)
library(janitor)
library(readxl)
path <- "./Data/Messy_bp.xlsx"
# the data starts lower so we're not going to see column names
# data starts on A4 and ends on M24
# range lets you fix what is shown
df <- read_xlsx(path, range = "A4:M24") %>% clean_names()
# this can be used later to get the names of the visits
# visits <- read_xlsx(path, skip = 2,n_max = 0) %>% names()
# we want to pivot all the blood pressures together
# df <-
# df %>% pivot_longer(starts_with("bp_"), values_to =) %>%
#   mutate(visit = case_when(name == "bp_8" ~ 1,
#                            name == "bp_10" ~ 2,
#                            name == "bp_12" ~ 3)) %>%
#   pivot_longer(starts_with("hr_"),
#                names_to = "visit2",
#                values_to = "heart_rate")
# make a data frame with just the bp values
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE)
# make data frame with just the hr values
hr <-
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
dat <-
full_join(bp,hr)
# add a date data type column *referene posix ct -> y-m-d
dat <-
dat %>%
mutate(birthdate = paste(year_birth,
month_of_birth,
day_birth,
sep = "-") %>%
as.POSIXct())
dat$race
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White"))
dat$race
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White"))
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White",
TRUE ~ race))
dat <-
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White",
TRUE ~ race))
dat$race
dat <-
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "Caucasian" ~ "White",
TRUE ~ race))
dat$race
saveRDS(dat,"./notes/cleaned_bp.rds")
library(tidyverse)
library(janitor)
library(readxl)
path <- "./Data/Messy_bp.xlsx"
# the data starts lower so we're not going to see column names
# data starts on A4 and ends on M24
# range lets you fix what is shown
df <- read_xlsx(path, range = "A4:M24") %>% clean_names()
# this can be used later to get the names of the visits
# visits <- read_xlsx(path, skip = 2,n_max = 0) %>% names()
# we want to pivot all the blood pressures together
# df <-
# df %>% pivot_longer(starts_with("bp_"), values_to =) %>%
#   mutate(visit = case_when(name == "bp_8" ~ 1,
#                            name == "bp_10" ~ 2,
#                            name == "bp_12" ~ 3)) %>%
#   pivot_longer(starts_with("hr_"),
#                names_to = "visit2",
#                values_to = "heart_rate")
# make a data frame with just the bp values
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE)
# make data frame with just the hr values
hr <-
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
dat <-
full_join(bp,hr)
# add a date data type column *referene posix ct -> y-m-d
dat <-
dat %>%
mutate(birthdate = paste(year_birth,
month_of_birth,
day_birth,
sep = "-") %>%
as.POSIXct())
dat <-
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "Caucasian" ~ "White",
TRUE ~ race))
dat$race
saveRDS(dat,"./notes/cleaned_bp.rds")
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~race)
library(tidyverse)
library(GGally)
dat <- readRDS("./notes/cleaned_bp.rds")
names(dat)
# part of (GGally), gets an initial look at the data
dat %>%
select(-c(pat_id, month_of_birth, day_birth, year_birth)) %>%
ggpairs()
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~race)
dat %>%
group_by(race) %>%
summarize(mean_systolic = mean(systolic))
dat %>%
group_by(race,sex) %>%
summarize(mean_systolic = mean(systolic))
library(tidyverse)
library(janitor)
library(gganimate)
df <- read_csv("./Data/BioLog_Plate_Data.csv")
library(tidyverse)
#### LISTS ###
a <- 1:10
b <- letters
c <- c(TRUE, TRUE, FALSE)
list(a,b,c)
x <- list(a,b,c)
View(x)
x[[1]]
x[[2]]
x[[3]]
x[[1]][3]
x[[1;3]][1]
x[[1:3]][1]
x[[1:3]][1]
for(i in 1:3){
print(x[[i]][1])
}
# PURRR / MAP
map(x,1)
map_chr(x,1)
y <- list(a=iris,b=mtcars)
map(y,class)
map(x,class)
y[[1]][,1]
y[[1]][,1] * y[[1]][,2]
new_col <- y[[1]][,1] * y[[1]][,2]
y[[1]]["products"] <- new_col
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
map(y,prod_function)
lapply(iris,as.character)
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
if(!is.numeric(x[,1])){ # give if a true/false sequence
stop("Hey, ummmmm that first column isn't numeric. Try again.")
}
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
y <- list(a=iris,b=mtcars)
y$a$Sepal.Length <- as.character(y$a$Sepal.Length)
map(y,prod_function) # the function will be applied to every element of the list
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[,1])
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[,1])
map(y,prod_function) # the function will be applied to every element of the list
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
if(!is.numeric(x[,1])){ # give if a true/false sequence
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[])
}
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
map(y,prod_function) # the function will be applied to every element of the list
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
if(!is.numeric(x[,1])){ # give if a true/false sequence
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[,1])
}
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
map(y,prod_function) # the function will be applied to every element of the list
library(tidyverse)
mpg
mpg %>% names
mpg %>%
ggplot(aes(x=displ,y=hwy)) +
geom_smooth(method="lm")
mpg$hwy %>% mean
mpg$hwy %>% mean
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_smooth(method="lm") # visualisation of a linear regression
m <- glm(data = mpg,
formula = hwy ~ displ) # generalized linear model
# this is spitting out a list of stats jargon
# ~ means "as a function of"
summary(m)
n <- glm(data = mpg,
formula = hwy ~ displ + factor(cyl))
summary(n)
m$coefficients
n$coefficients
install.packages("modelr")
library(modelr)
add_predictions(mdg,n)
preds <- add_predictions(mpg,n)
View(preds)
preds %>%
ggplot(aes(x=displ,color=factor(cyl)))+
geom_point(aes(y=hwy),color='black')+
geom_smooth(method='lm',aes(y=pred))
