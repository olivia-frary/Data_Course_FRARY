# visits <- read_xlsx(path, skip = 2,n_max = 0) %>% names()
# we want to pivot all the blood pressures together
# df <-
# df %>% pivot_longer(starts_with("bp_"), values_to =) %>%
#   mutate(visit = case_when(name == "bp_8" ~ 1,
#                            name == "bp_10" ~ 2,
#                            name == "bp_12" ~ 3)) %>%
#   pivot_longer(starts_with("hr_"),
#                names_to = "visit2",
#                values_to = "heart_rate")
# make a data frame with just the bp values
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE)
# make data frame with just the hr values
hr <-
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
dat <-
full_join(bp,hr)
# add a date data type column *referene posix ct -> y-m-d
dat <-
dat %>%
mutate(birthdate = paste(year_birth,
month_of_birth,
day_birth,
sep = "-") %>%
as.POSIXct())
dat$race
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White"))
dat$race
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White"))
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White",
TRUE ~ race))
dat <-
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "caucasion" ~ "White",
TRUE ~ race))
dat$race
dat <-
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "Caucasian" ~ "White",
TRUE ~ race))
dat$race
saveRDS(dat,"./notes/cleaned_bp.rds")
library(tidyverse)
library(janitor)
library(readxl)
path <- "./Data/Messy_bp.xlsx"
# the data starts lower so we're not going to see column names
# data starts on A4 and ends on M24
# range lets you fix what is shown
df <- read_xlsx(path, range = "A4:M24") %>% clean_names()
# this can be used later to get the names of the visits
# visits <- read_xlsx(path, skip = 2,n_max = 0) %>% names()
# we want to pivot all the blood pressures together
# df <-
# df %>% pivot_longer(starts_with("bp_"), values_to =) %>%
#   mutate(visit = case_when(name == "bp_8" ~ 1,
#                            name == "bp_10" ~ 2,
#                            name == "bp_12" ~ 3)) %>%
#   pivot_longer(starts_with("hr_"),
#                names_to = "visit2",
#                values_to = "heart_rate")
# make a data frame with just the bp values
bp <-
df %>%
select(-starts_with("hr_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("bp_"), values_to ="bp") %>%
mutate(visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE)
# make data frame with just the hr values
hr <-
df %>%
select(-starts_with("bp_")) %>% # for picking columns
# keeping everything except the heart rate ones
pivot_longer(starts_with("hr_"), values_to ="hr") %>%
mutate(visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
# now join the two data frames
dat <-
full_join(bp,hr)
# add a date data type column *referene posix ct -> y-m-d
dat <-
dat %>%
mutate(birthdate = paste(year_birth,
month_of_birth,
day_birth,
sep = "-") %>%
as.POSIXct())
dat <-
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "Caucasian" ~ "White",
TRUE ~ race))
dat$race
saveRDS(dat,"./notes/cleaned_bp.rds")
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~race)
library(tidyverse)
library(GGally)
dat <- readRDS("./notes/cleaned_bp.rds")
names(dat)
# part of (GGally), gets an initial look at the data
dat %>%
select(-c(pat_id, month_of_birth, day_birth, year_birth)) %>%
ggpairs()
dat %>%
ggplot(aes(x=visit)) +
geom_point(aes(y=systolic),color="red") +
geom_point(aes(y=diastolic),color="black") +
stat_summary(aes(y=systolic),geom="path", color="red") +
stat_summary(aes(y=diastolic),geom="path", color="black") +
labs(y="blood pressure") +
facet_wrap(~race)
dat %>%
group_by(race) %>%
summarize(mean_systolic = mean(systolic))
dat %>%
group_by(race,sex) %>%
summarize(mean_systolic = mean(systolic))
library(tidyverse)
library(janitor)
library(gganimate)
df <- read_csv("./Data/BioLog_Plate_Data.csv")
library(tidyverse)
#### LISTS ###
a <- 1:10
b <- letters
c <- c(TRUE, TRUE, FALSE)
list(a,b,c)
x <- list(a,b,c)
View(x)
x[[1]]
x[[2]]
x[[3]]
x[[1]][3]
x[[1;3]][1]
x[[1:3]][1]
x[[1:3]][1]
for(i in 1:3){
print(x[[i]][1])
}
# PURRR / MAP
map(x,1)
map_chr(x,1)
y <- list(a=iris,b=mtcars)
map(y,class)
map(x,class)
y[[1]][,1]
y[[1]][,1] * y[[1]][,2]
new_col <- y[[1]][,1] * y[[1]][,2]
y[[1]]["products"] <- new_col
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
map(y,prod_function)
lapply(iris,as.character)
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
if(!is.numeric(x[,1])){ # give if a true/false sequence
stop("Hey, ummmmm that first column isn't numeric. Try again.")
}
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
y <- list(a=iris,b=mtcars)
y$a$Sepal.Length <- as.character(y$a$Sepal.Length)
map(y,prod_function) # the function will be applied to every element of the list
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[,1])
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[,1])
map(y,prod_function) # the function will be applied to every element of the list
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
if(!is.numeric(x[,1])){ # give if a true/false sequence
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[])
}
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
map(y,prod_function) # the function will be applied to every element of the list
# function that takes first and second columns, makes new column with product
prod_function <-
function(x){
if(!is.numeric(x[,1])){ # give if a true/false sequence
# stop("Hey, ummmmm that first column isn't numeric. Try again.")
x[,1] <- as.numeric(x[,1])
}
new_col <- x[,1] * x[,2]
x["products"] <- new_col
return(x)
}
map(y,prod_function) # the function will be applied to every element of the list
library(tidyverse)
mpg
mpg %>% names
mpg %>%
ggplot(aes(x=displ,y=hwy)) +
geom_smooth(method="lm")
mpg$hwy %>% mean
mpg$hwy %>% mean
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_smooth(method="lm") # visualisation of a linear regression
m <- glm(data = mpg,
formula = hwy ~ displ) # generalized linear model
# this is spitting out a list of stats jargon
# ~ means "as a function of"
summary(m)
n <- glm(data = mpg,
formula = hwy ~ displ + factor(cyl))
summary(n)
m$coefficients
n$coefficients
install.packages("modelr")
library(modelr)
add_predictions(mdg,n)
preds <- add_predictions(mpg,n)
View(preds)
preds %>%
ggplot(aes(x=displ,color=factor(cyl)))+
geom_point(aes(y=hwy),color='black')+
geom_smooth(method='lm',aes(y=pred))
library(tidyverse)
library(palmerpenguins)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm)) +
geom_point() +
geom_smooth(method='lm')
head(penguins)
# make linear regression of this plot
glm(data = penguins,
formula = bill_length_mm ~ bill_depth_mm)
# make linear regression of this plot
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm)
# make linear regression of this plot
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm) %>%
summary()
# we always visualize first and then we model
aov(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm) %>%
summary()
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method='lm')
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm + species) %>%
summary()
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm * species) %>%
summary()
# make linear regression of this plot
m1 <-
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm) %>%
summary()
# this is showing simpson's paradox. Now that they're separated, the
# opposite trend shows now.
# just adding, this takes into account the different species.
m2 <-
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm + species) %>%
summary()
# introducing the interaction term between bill length and species - *
m3 <-
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm * species) %>%
summary()
m1$aic
m2$aic
m2$aic
library(easystats)
install.packages("easystats")
library(easystats)
compare_performance(m1,m2,m3)
library(tidyverse)
library(palmerpenguins)
library(easystats)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm)) +
geom_point() +
geom_smooth(method='lm')
head(penguins)
# make linear regression of this plot
m1 <-
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm)
# according to this model, the average bill depth is 20.88547
# -0.08502 is the slope (m)
# we always visualize first and then we model
# analysis of variance
aov(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm) %>%
summary()
# tells you degrees of freedom, sum of squares, mean fo squares
# this is an anova table. Pr(>F) is the p-value, this only tells you
# if your data is significant, if you chose a good variable comparison.
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method='lm')
# this is showing simpson's paradox. Now that they're separated, the
# opposite trend shows now.
# just adding, this takes into account the different species.
m2 <-
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm + species)
# the table is more confusing now. The intercept is 10.6
# this picks the default categorical variables based on the alphabet,
# adele became the intercept species. The other estimates tell you what
# to subtract from the default
# here, slope is the same for all the species
# introducing the interaction term between bill length and species - *
m3 <-
glm(data = penguins,
formula =  bill_depth_mm ~ bill_length_mm * species)
# here the slope can change based on the species
# "tell me the effect of species AND the slope"
# aic is telling you which is capturing reality the best.
m1$aic
m2$aic
m2$aic
compare_performance(m1,m2,m3)
# from easystats
compare_performance(m1,m2,m3) %>% plot
names(penguins)
m4 <-
glm(data=penguins,
formula=bill_depth_mm ~ bill_length_mm * species + sex)
# from easystats
compare_performance(m1,m2,m3,m4) %>% plot
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method='lm',linetype=sex)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method='lm',aes(linetype=sex))
m4 <-
glm(data=penguins,
formula=bill_depth_mm ~ bill_length_mm * species + sex + island)
# from easystats
compare_performance(m1,m2,m3,m4) %>% plot
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method='lm',aes(linetype=sex)) +
facet_wrap(~island)
formula(m4)
x <-
data.frame(bill_length_mm = 5000,
species = "Chinstrap",
sex = "male",
island = "Dream")
# we're gonna go with model 4, lets do some predicting
predict(m4,x) # it needs all the variables exactly to do a prediction
x <-
data.frame(bill_length_mm = c(5000,100),
species = c("Chinstrap","Chinstrap"),
sex = c("male","male"),
island = c("Dream","Dream"))
# we're gonna go with model 4, lets do some predicting
predict(m4,x) # it needs all the variables exactly to do a prediction
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_plot() +
geom_smooth(method='lm')
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
m5 <- glm(data=mpg, formula=hwy~displ)
predict(m5,y)
# here the model lied to us, if you know more about cars, you can see the
# error in model. The bigger the v8 engine, you do not get better gas mileage
y <- data.fram(displ=500)
# here the model lied to us, if you know more about cars, you can see the
# error in model. The bigger the v8 engine, you do not get better gas mileage
y <- data.frame(displ=500)
m5 <- glm(data=mpg, formula=hwy~displ)
predict(m5,y)
# it is important to not predict outside of the data you've seen.
a <- data.frame(displ=4.5)
m9 <- glm(data=mpg, formula=hwy~displ)
predict(m9,a)
predict(m5,a)
m6 <- glm(data=mpg, formula=hwy~log(displ))
ggplot(aes(x=log(displ),y=hwy) +
geom_smooth(method='lm')
geom_smooth(method='lm',formula = y ~ log(displ))
geom_smooth(method='lm',fomrula = y ~ log(x))
geom_smooth(method='lm',formula = y ~ log(x))
geom_smooth(method='lm',formula = y ~ log(x))
mpg %>%
ggplot(aes(x=(displ),y=hwy)) +
geom_point() +
geom_smooth(method='lm',formula = y ~ log(x))
# new built in
Titanic
# new built in
Titanic %>%  as.data.frame()
# so far we've been predicting continuous variable, what about categorical
df <- read_csv("./Data/GradSchool_Admissions.csv")
View(df)
glm(data=df,
formula=admit~gre+gpa+rank)
m6 <- glm(data=df,
formula=admit~gre+gpa+rank)
m6 <- glm(data=df,
formula=admit~gre+gpa+rank) %>%
summary()
m6
df <-
df %>%
mutate(admit = as.logical(admit))
m6 <- glm(data=df,
formula=admit~gre+gpa+rank) %>%
m6 <- glm(data=df,
formula=admit~gre+gpa+rank) %>%
summary()
m6
# logistic -> family = 'binomial'
m6 <- glm(data = df,
formula = admit~gre+gpa+rank,
family = "binomial") %>%
summary()
m6
library(modelr)
add_predictions(df,m6)
library(modelr)
# logistic -> family = 'binomial'
m6 <- glm(data = df,
formula = admit~gre+gpa+rank,
family = "binomial")
add_predictions(df,m6)
add_predictions(df,m6,type="response")
add_predictions(df,m6,type="response") %>%
ggplot(aes(x=gpa,y=pred)) +
geom_smooth()
add_predictions(df,m6,type="response") %>%
# don't forget type, it's what gives us percentages !!!!!
ggplot(aes(x=gpa,y=pred)) +
geom_smooth()
add_predictions(df,m6,type="response") %>%
# don't forget type, it's what gives us percentages !!!!!
ggplot(aes(x=gpa,y=pred,color=rank)) +
geom_smooth()
# don't forget type, it's what gives us percentages !!!!!
ggplot(aes(x=gpa,y=pred,color=factor(rank)) +
geom_smooth()
add_predictions(df,m6,type="response") %>%
add_predictions(df,m6,type="response") %>%
# don't forget type, it's what gives us percentages !!!!!
ggplot(aes(x=gpa,y=pred,color=factor(rank))) +
geom_smooth()
library(tidyverse)
library(janitor)
library(readxl)
path <- "./Data/Messy_bp.xlsx"
# the data starts lower so we're not going to see column names
# data starts on A4 and ends on M24
# range lets you fix what is shown
df <- read_xlsx(path, range = "A4:M24") %>% clean_names()
