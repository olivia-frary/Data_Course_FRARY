getwd()
getwd()
#list csv files
list.files(path="Data",pattern = ".csv")
# list csv files from data directory in object csv_files
csv_files <-  list.files(path="Data",pattern = ".csv")
csv_files
# the length function tells you how many things are in your object
length(csv_files)
# the length function tells you how many things are in your object
?length()
# the length function tells you how many things are in your object
length(csv_files)
df <- read.csv("wingspan_vs_mass.csv")
df <- read.csv("data/wingspan_vs_mass.csv")
df
# list csv files from data directory in object csv_files
csv_files <-  list.files(path="Data",pattern = ".csv")
df <- read.csv("data/wingspan_vs_mass.csv")
head(df)
?head()
?head(df, n=5)
head(df, n=5)
head(df,5
)
head(df,5)
df <- read.csv("Data/wingspan_vs_mass.csv")
list.files(path="Data",pattern="^b",recursive=TRUE)
df <- read.csv("./Data/wingspan_vs_mass.csv")
blist <- list.files(path="Data",pattern="^b",recursive=TRUE)
head(df,n=5)
?list.files
# Assignment 2
# list csv files from data directory in object csv_files
csv_files <-  list.files(path="Data",pattern = ".csv")
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for dataframe
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
list.files(path="Data",pattern="^b",recursive=TRUE)
# Assignment 2
# list csv files from data directory in object csv_files
csv_files <-  list.files(path="Data",
pattern = ".csv")
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for dataframe
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
list.files(path="Data",
pattern="^b",
recursive=TRUE)
### DONT FORGET TO ADD COMMIT PUSH YOUR ASSIGNMENT
?list.files()
# list csv files in an object
csv_files <- list.files(path='./data',
pattern='.csv')
length(csv.files)
length(csv_files)
df <- read.csv("./data/wingspan_vs_mass.csv")
head(df,5)
list.files(path='./Data', pattern='^b', recursive=TRUE)
#### Assignment 2 ####
# list csv files from data directory in object csv_files
csv_files <-  list.files(path = "Data",
pattern = ".csv")
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for dataframe
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
### DONT FORGET TO ADD COMMIT PUSH YOUR ASSIGNMENT
?readLines()
# connection is like a file path
readLines("Data/data-shell/creatures/basilisk.dat", 1)
readLines("Data/data-shell/creatures/basilisk.dat",
n=1)
reaLines("Data/data-shell/data/pdb/benzaldehyde.pdb",
n=1)
readLines("Data/data-shell/creatures/basilisk.dat",
n=1)
readLines("Data/data-shell/data/pdb/benzaldehyde.pdb",
n=1)
readLines("Data/Messy_Take2/b_df.csv",
n=1)
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
bfiles
for(i in bfiles){
print(readLines(i,n=1))
}
x <- 1:10
for(i in x){
print(x*2)
}
x <- 1:10
for(i in x){
print(i*2)
}
?list.files
allcsv <-  list.files(path = "Data",
pattern = ".csv"
recursive = TRUE,
allcsv <-  list.files(path = "Data",
pattern = ".csv"
recursive = TRUE,
#### Assignment 2 ####
# list csv files from data directory in object csv_files
csv_files <-  list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for data frame
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
# connection is like a file path, remember to do n= to be precise
readLines("Data/data-shell/creatures/basilisk.dat",
n=1)
readLines("Data/data-shell/data/pdb/benzaldehyde.pdb",
n=1)
readLines("Data/Messy_Take2/b_df.csv",
n=1)
# using a for loop, code is inside the curly bracket
for(i in bfiles){
print(readLines(i,n=1))
}
for(i in csv_files){
print(readLines(i,n=1))
}
for(i in list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)){
print(readLines(i,n=1))
}
# bob should equal 7
jane <- 5*2 # This assigns the value of 5 times 2 to an object called "jane" - Either symbol works
bob = 3+4 # This assigns the evaluated function (3 + 4) to an object (like a variable) called "bob"
jane- bob
clear
'micheal'+'midge'
bob %in% c(1,2,3,4,5,6,7)
c(1,2,3,4,5,6,7) %in% bob
bob >= jane
bob == jane
jane == 10
(jane == 10) + 1   #!???
# One way to manually enter data is with the command c()
# That stands for "concatenate" and allows you to enter a series of values to be saved to a single object:
billy = c(2,3,4,5,6) # "billy" is now a NUMERIC VECTOR of 5 values
# This works for STRINGS as well. Strings are made up of characters
suzy = c("This","is","a","character","vector") # notice how each string is enclosed in quotes. That tells R it is a string
# c() requires you to separate the various elements with a comma
is.vector(billy) # numeric vector
billy+suzy
tommy <- c("1",2,3,4,5,TRUE,NA)
billy[1] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
billy[c(1,3)]
billy[1:2]
billy[c(1,3)]
suzy[c(4,5)]
billy[1] and billy [3]
billy[1] AND billy [3]
suzy[4:5]
observation = c(1,2,3,4,5,6,7,8,9,10) # our vector of observations from a reeated experiment
wingspan = c(1.2,1.4,1.0,1.2,1.8,2.0,2.2,1.1,2.3,2.0) # our vector of wingspans
mass = c(0.43,0.44,0.32,0.44,0.52,0.55,0.56,0.42,0.51,0.57) # our vector of mass
cbind(observation,wingspan,mass) # this will show us our matrix, but we want to assign it to an object!
data = cbind(observation,wingspan,mass) # assigned to an object called "data"
View(data)
data[1,3]
data[,3]
data[5,] # all values on 5th row
data[data[,3]>.5,]
iris[1,]
iris(Petal.Width)
iris$Petal.Width
mean(iris$Petal.Width)
summary(iris$Petal.Width)
names(iris)
iris$Petal.Length*iris$Petal.Width
iris$Petal.Area <- iris$Petal.Length*iris$Petal.Width
View(iris)
iris[1,]
# view all petal width values
iris$Petal.Width
mean(iris$Petal.Width)
summary(iris$Petal.Width)
names(iris) # gives column names
iris$Petal.Length*iris$Petal.Width
iris$Petal.Area <- iris$Petal.Length*iris$Petal.Width # create a new column and fill it with areas
iris[1,]
# view all petal width values
iris$Petal.Width
mean(iris$Petal.Width)
summary(iris$Petal.Width)
names(iris) # gives column names
iris$Petal.Length*iris$Petal.Width
iris$Petal.Area <- iris$Petal.Length*iris$Petal.Width # create a new column and fill it with areas
for(i in names(iris)){
x <- iris[,i]
print(summary(x))
}
#### Assignment 2 ####
# Task 4
# list csv files from data directory in object csv_files
csv_files <-  list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)
# Task 5
# find length of your csv files list
length(csv_files)
# Task 6
# reads the csv file into an object names df
df <- read.csv("./Data/wingspan_vs_mass.csv")
# Task 7
# prints the first 5 lines of the df object
head(df,n=5)
# Task 8
# list files in data directory that start with 'b'
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
# Task 9
# for loop that prints the first line in all the 'b' files
for(i in bfiles){
print(readLines(i,n=1))
}
# Task 10
# print the first line of all csv files
for(i in csv_files){
print(readLines(i,n=1))
}
# Data Frames ####
# R has quite a few built-in data sets
data("iris") # load it like this
iris_chr <- iris
View(iris_chr)
iris_chr$Sepal.Length <- as.character(iris$Sepal.Length)
class(iris_chr$Sepal.Length)
iris_chr$Sepal.Width <- as.character(iris$Sepal.Width)
class(iris_chr$Sepal.Width)
iris_chr$Petal.Length <- as.character(iris$Petal.Length)
class(iris_chr$Petal.Length)
iris_chr$Petal.Width <- as.character(iris$Petal.Width)
class(iris_chr$Petal.Width)
iris_chr$Species <- as.character(iris$Species)
class(iris_chr$Species)
iris_chr <- iris
for(i in 1:ncol(iris_chr)){
iris_chr[,i] <- as.character(iris_chr[,i])
}
class(iris_chr$Sepal.Length)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
iris_chr <- iris
class(iris_chr$Sepal.Length)
iris_chr <- iris
class(iris_chr$Sepal.Length)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
for(i in 1:ncol(iris_chr)){
iris_chr[,i] <- as.character(iris_chr[,i])
}
class(iris_chr$Sepal.Length)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
class(Sepal.Area)
Sepal.Area
head(df)
df <- iris[seq(2,150,2),]
head(df)
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
head(iris)
big_area_iris <- iris[Sepal.Area > 20,]
head(big_area_iris)
df <- iris[seq(2,150,2),]
head(df)
# 2.  Create a new object called iris_chr which is a copy of iris, except where every column is a character class
iris_chr <- iris
for(i in 1:ncol(iris_chr)){
iris_chr[,i] <- as.character(iris_chr[,i])
}
# 3.  Create a new numeric vector object named "Sepal.Area" which is the product of Sepal.Length and Sepal.Width
Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
class(Sepal.Area)
# 4.  Add Sepal.Area to the iris data frame as a new column
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
head(iris)
# 5.  Create a new dataframe that is a subset of iris using only rows where Sepal.Area is greater than 20
# (name it big_area_iris)
big_area_iris <- iris[Sepal.Area > 20,]
head(big_area_iris)
#### Characters Practice Week 3 ####
library(tidyverse)
length(vector)
nchar(vector)
class(vector)
class(vector)
nchar(vector)
# exercise 2
x <- c("open", "Sesame")
y <- c("You", "Suck.")
nchar(x)
vector <- ("Good morning! ")
nchar(vector)
# exercise 2
x <- c("Open", "Sesame ")
y <- c("You", "Suck.")
nchar(x) # creates a vector with the two lengths
nchar(c(x,y))
#### Sequences Practice Week 3 ####
# exercise 1
seq(1,10,by=2)
seq(1,10,by=3)
#exercise 2
seq(9,45,9)
#exercise 3
seq(1,12,length.out=5)
?seq()
seq(1,10,length.out=3)
# exercise 4
x = 1:5
rep(x,2)
rep(x,2,each=2)
rep(x,each=4)
#### Indexing Practice Week 3 ####
# exercise 1
x = c("ss","aa","ff","kk","bb")
x[1]
x[c(1,3)]
# exercise 2
d = data.frame(Name = c("Betty","Bob","Susan"),
Age = seq(20,30,length.out=3),
Height_cm = c(490,22,0))
d
d[c("Name","Age")]
d[c("Age","Name","Height_cm")][1,]
# exercise 3
d$Name
d$Age[2]
# exercise 4
d$Age > 20
d[d$Age > 20]
d[d$Age > 20,]
#### Missing Values Practice Week 3 ####
# exercise 1
X = c(NA,3,14,NA,33,17,NA,41)
is.na(x)
is.na(X)
X = c(NA,3,14,NA,33,17,NA,41)
is.na(X)
X[!is.na(X)]
#### Loops Practice Week 3 ####
# exercise 1
for(i in 1:3){
x <- paste0("Number",i)
print(x)
}
x <- paste0("Number",i)
#### Loops Practice Week 3 ####
# exercise 1
for(i in 1:3){
x <- paste0("Number",i)
print(x)
}
planets <- c("Mercury","Venus","Earth","Mars",
"Jupiter","Saturn","Uranus","Neptune")
n <- 1
newVector <- c()
for(i in planets){
newVector[n] <- paste0(i,i)
n=n+1
}
newVector
?paste0
for(i in 1:7){
print(i^3)
}
