# Assignment 2
# list csv files from data directory in object csv_files
csv_files <-  list.files(path="Data",
pattern = ".csv")
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for dataframe
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
list.files(path="Data",
pattern="^b",
recursive=TRUE)
### DONT FORGET TO ADD COMMIT PUSH YOUR ASSIGNMENT
?list.files()
# list csv files in an object
csv_files <- list.files(path='./data',
pattern='.csv')
length(csv.files)
length(csv_files)
df <- read.csv("./data/wingspan_vs_mass.csv")
head(df,5)
list.files(path='./Data', pattern='^b', recursive=TRUE)
#### Assignment 2 ####
# list csv files from data directory in object csv_files
csv_files <-  list.files(path = "Data",
pattern = ".csv")
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for dataframe
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
### DONT FORGET TO ADD COMMIT PUSH YOUR ASSIGNMENT
?readLines()
# connection is like a file path
readLines("Data/data-shell/creatures/basilisk.dat", 1)
readLines("Data/data-shell/creatures/basilisk.dat",
n=1)
reaLines("Data/data-shell/data/pdb/benzaldehyde.pdb",
n=1)
readLines("Data/data-shell/creatures/basilisk.dat",
n=1)
readLines("Data/data-shell/data/pdb/benzaldehyde.pdb",
n=1)
readLines("Data/Messy_Take2/b_df.csv",
n=1)
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
bfiles
for(i in bfiles){
print(readLines(i,n=1))
}
x <- 1:10
for(i in x){
print(x*2)
}
x <- 1:10
for(i in x){
print(i*2)
}
?list.files
allcsv <-  list.files(path = "Data",
pattern = ".csv"
recursive = TRUE,
allcsv <-  list.files(path = "Data",
pattern = ".csv"
recursive = TRUE,
#### Assignment 2 ####
# list csv files from data directory in object csv_files
csv_files <-  list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)
# the length function tells you how many things are in your object
length(csv_files)
# df is common to use, it stands for data frame
df <- read.csv("./Data/wingspan_vs_mass.csv")
head(df,n=5)
# ^ means starts with
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
# connection is like a file path, remember to do n= to be precise
readLines("Data/data-shell/creatures/basilisk.dat",
n=1)
readLines("Data/data-shell/data/pdb/benzaldehyde.pdb",
n=1)
readLines("Data/Messy_Take2/b_df.csv",
n=1)
# using a for loop, code is inside the curly bracket
for(i in bfiles){
print(readLines(i,n=1))
}
for(i in csv_files){
print(readLines(i,n=1))
}
for(i in list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)){
print(readLines(i,n=1))
}
# bob should equal 7
jane <- 5*2 # This assigns the value of 5 times 2 to an object called "jane" - Either symbol works
bob = 3+4 # This assigns the evaluated function (3 + 4) to an object (like a variable) called "bob"
jane- bob
clear
'micheal'+'midge'
bob %in% c(1,2,3,4,5,6,7)
c(1,2,3,4,5,6,7) %in% bob
bob >= jane
bob == jane
jane == 10
(jane == 10) + 1   #!???
# One way to manually enter data is with the command c()
# That stands for "concatenate" and allows you to enter a series of values to be saved to a single object:
billy = c(2,3,4,5,6) # "billy" is now a NUMERIC VECTOR of 5 values
# This works for STRINGS as well. Strings are made up of characters
suzy = c("This","is","a","character","vector") # notice how each string is enclosed in quotes. That tells R it is a string
# c() requires you to separate the various elements with a comma
is.vector(billy) # numeric vector
billy+suzy
tommy <- c("1",2,3,4,5,TRUE,NA)
billy[1] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
billy[c(1,3)]
billy[1:2]
billy[c(1,3)]
suzy[c(4,5)]
billy[1] and billy [3]
billy[1] AND billy [3]
suzy[4:5]
observation = c(1,2,3,4,5,6,7,8,9,10) # our vector of observations from a reeated experiment
wingspan = c(1.2,1.4,1.0,1.2,1.8,2.0,2.2,1.1,2.3,2.0) # our vector of wingspans
mass = c(0.43,0.44,0.32,0.44,0.52,0.55,0.56,0.42,0.51,0.57) # our vector of mass
cbind(observation,wingspan,mass) # this will show us our matrix, but we want to assign it to an object!
data = cbind(observation,wingspan,mass) # assigned to an object called "data"
View(data)
data[1,3]
data[,3]
data[5,] # all values on 5th row
data[data[,3]>.5,]
iris[1,]
iris(Petal.Width)
iris$Petal.Width
mean(iris$Petal.Width)
summary(iris$Petal.Width)
names(iris)
iris$Petal.Length*iris$Petal.Width
iris$Petal.Area <- iris$Petal.Length*iris$Petal.Width
View(iris)
iris[1,]
# view all petal width values
iris$Petal.Width
mean(iris$Petal.Width)
summary(iris$Petal.Width)
names(iris) # gives column names
iris$Petal.Length*iris$Petal.Width
iris$Petal.Area <- iris$Petal.Length*iris$Petal.Width # create a new column and fill it with areas
iris[1,]
# view all petal width values
iris$Petal.Width
mean(iris$Petal.Width)
summary(iris$Petal.Width)
names(iris) # gives column names
iris$Petal.Length*iris$Petal.Width
iris$Petal.Area <- iris$Petal.Length*iris$Petal.Width # create a new column and fill it with areas
for(i in names(iris)){
x <- iris[,i]
print(summary(x))
}
#### Assignment 2 ####
# Task 4
# list csv files from data directory in object csv_files
csv_files <-  list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)
# Task 5
# find length of your csv files list
length(csv_files)
# Task 6
# reads the csv file into an object names df
df <- read.csv("./Data/wingspan_vs_mass.csv")
# Task 7
# prints the first 5 lines of the df object
head(df,n=5)
# Task 8
# list files in data directory that start with 'b'
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
# Task 9
# for loop that prints the first line in all the 'b' files
for(i in bfiles){
print(readLines(i,n=1))
}
# Task 10
# print the first line of all csv files
for(i in csv_files){
print(readLines(i,n=1))
}
x > 7
15)
x <- c(4,6,5,7,10,9,4,15)
x > 7
x < 7
p <- c(3,5,6,8)
q <- c(3,3,3)
p+q
a = c(1,3,4,7,10,0)
b = c(1,2)
a+b
z <- 0.9
digits <- as.character(z)
as.integer(digits)
# Exercise 4
z <- 0:9
digits <- as.character(z)
as.integer(digits)
x <- c(1,2,3,4)
(x+2)[(!is.na(x)) x > 0] -> k
x <- c(1,2,3,4)
(x+2)[(!is.na(x)) & x > 0] -> k
#### Factors Practice Week 3 ####
library(tidyverse)
#### Factors Practice Week 3 ####
install(tidyverse)
install.packages(tidyverse)
installed.packages()
install.packages("tidyverse")
#### Factors Practice Week 3 ####
library(tideyverse)
#### Factors Practice Week 3 ####
library(tidyverse)
library(gapminder)
install.packages("gapminder")
library(tidyverse)
library(gapminder)
library(gapminder)
data("gapminder")
data("gapminder")
df = gapminder
head(gapminder)
levels(df$continent)
levels(df$continent) <- c(levels(df$region), "Antarctica")
levels(df$continent) <- c(levels(df$continent), "Antarctica")
# the continent variable is a factor
levels(df$continent)
levels(df$continent) <- c(levels(df$continent),
"North America",
"South America",
"Central America")
# the continent variable is a factor
levels(df$continent)
# use the table function to check the occurrences of each factor
table(df$continent)
# Let's try
nums <- c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums) # make sure it's numeric
# convert to a factor
as.factor(nums) # show in console
nums_factor <- as.factor(nums) #assign it to a new object as a factor
class(nums_factor) # check it
library(tidyverse)
library(gapminder)
data("gapminder")
df = gapminder
head(gapminder)
# the continent variable is a factor
levels(df$continent)
# how to add a factor to the list
levels(df$continent) <- c(levels(df$continent), "Antarctica")
levels(df$continent) <- c(levels(df$continent),
"North America",
"South America",
"Central America")
# use the table function to check the occurrences of each factor
table(df$continent)
View(df)
# this is where I am stuck, I need to research how to add data
# to a new level
south <- c("Argentina","Bolivia","Brazil","Chile","Colombia","Ecuador","Paraguay",
"Peru","Uruguay","Venezuela")
print(df$country in south)
print(df$country %in% south)
if (df$country %in% south){
rbind(df, df[1,])
}
csv_files <- list.files(path='Data',
pattern='.csv')
length(csv_files) # finds length of object
# remember to be PRECISE, i.e. 'data' should be capitalized
# df stands for data frame, it is common use
df <- read.csv('./Data/wingspan_vs_mass.csv')
head(df,n=5) # enter number as n=5 to be clean and precise
# ^ means use the first letter, ^b - is the first letter 'b'?
bfiles <- list.files(path='Data',
pattern='^b',
recursive=TRUE)
for(i in bfiles){
print(readLines(i,n=1))
}
csv_files <-  list.files(path = "Data",
pattern = ".csv",
full.names = TRUE)
# Task 5
# find length of your csv files list
length(csv_files)
# Task 6
# reads the csv file into an object names df
df <- read.csv("./Data/wingspan_vs_mass.csv")
# Task 7
# prints the first 5 lines of the df object
head(df,n=5)
# Task 8
# list files in data directory that start with 'b'
bfiles <- list.files(path = "Data",
pattern = "^b",
recursive = TRUE,
full.names = TRUE)
# Task 9
# for loop that prints the first line in all the 'b' files
for(i in bfiles){
print(readLines(i,n=1))
}
# Task 10
# print the first line of all csv files
for(i in csv_files){
print(readLines(i,n=1))
}
bfiles <- list.files(path='Data',
pattern='^b',
recursive=TRUE)
# ^ means use the first letter, ^b - is the first letter 'b'?
bfiles <- list.files(path='Data',
pattern='^b',
recursive=TRUE,
full.names = TRUE)
# using a for loop, code is inside the curly bracket
# the 'i' iterates through items in bfiles
for(i in bfiles){
print(readLines(i,n=1))
}
south <- c("Argentina","Bolivia","Brazil","Chile","Colombia","Ecuador","Paraguay",
"Peru","Uruguay","Venezuela")
for (i in south)
if (country[1,] %in% south){
rbind(df, df[,])
}
View(df)
library(tidyverse)
library(gapminder)
data("gapminder")
df = gapminder
head(gapminder)
# the continent variable is a factor
levels(df$continent)
# how to add a factor to the list
levels(df$continent) <- c(levels(df$continent), "Antarctica")
levels(df$continent) <- c(levels(df$continent),
"North America",
"South America",
"Central America")
# use the table function to check the occurrences of each factor
table(df$continent)
# this is where I am stuck, I need to research how to add data
# to a new level
south <- c("Argentina","Bolivia","Brazil","Chile","Colombia","Ecuador","Paraguay",
"Peru","Uruguay","Venezuela")
View(df)
for (i in south)
if (df[,i] %in% south){
rbind(df, df[,])
}
for (i in df[,1])
if (df[i,1] %in% south){
rbind(df, df[,])
}
odd = c((1:1000)/2)
print(odd)
seq(1,100,2)
for (i in 1:100){
seq1,1000,2
for (i in 1:100){
seq(1,1000,2)
}
rep(seq(1,1000,2))
rep(seq(1,1000,2),100)
# Vectors are 1-dimensional series of values in some order
1:10 # ':' only works for integers
letters # built-in pre-made vector of a - z
vector1 <- c(1,2,3,4,5,6,7,8,9,10)
vector2 <- c(5,6,7,8,4,3,2,1,3,10)
vector3 <- letters # letters and LETTERS are built-in vectors
vector1 + 5
vector1[3] + 5 # five was added to each element of vector 1
vector2[2] / 2
vector1*vector2
vector3 + 1 # can't add 1 to "a"
letters %in% c("a","b","c","z")
# Data Frames ####
# R has quite a few built-in data sets
data("iris") # load it like this
View(iris)
dat <- iris # can rename the object to be easier to type if you want
# ways to get a peek at our data set
names(dat)
dim(dat)
head(dat)
row(dat)
nrow(dat)
head(dat)
dat$Sepal.Length
# You can access specific columns of a "data frame" by name using '$'
dat$Species
class(dat$Species)
levels(dat$Species)
# You can also use square brackets to get specific 1-D or 2-D subsets of a data frame (rows and/or columns)
dat[1,1] # [Rows, Columns]
dat[1:3,5]
vector2[1]
letters[1:7]
letters[c(1,3,5,7)]
# Can make a quick plot....just give vectors for x and y axes
plot(x=dat$Petal.Length, y=dat$Sepal.Length)
plot(x=dat$Species, y=dat$Sepal.Length)
# Check all classes (for each column in dat)
str(dat)
# Let's try
nums <- c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums) # make sure it's numeric
# convert to a factor
as.factor(nums) # show in console
nums_factor <- as.factor(nums) #assign it to a new object as a factor
class(nums_factor) # check it
levels(nums_factor)
# convert numeric to character
as.character(vector1)
as.character(vector1) + 5
# convert character to numeric
as.numeric(vector3)
#check it out
plot(nums)
plot(nums_factor)
table(nums)
# cumulative functions
cumsum(vector1)
cumprod(vector1)
cummin(vector1)
cummax(vector1)
# even has built-in statistical distributions (we will see more of these later)
dbinom(50,100,.5) # probability of getting exactly 50 heads out of 100 coin flips
df <- iris[seq(2,150,2),]
View(df)
iris_chr <- iris[,chr]
iris_chr <- iris[,chr()]
Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
class(Sepal.Area)
Sepal.Area
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
View(iris)
iris
head(iris)
df <- iris[seq(2,150,2),]
df
df2 <- iris[Sepal.Area > 20,]
View(df2)
head(df2)
big_area_iris <- iris[Sepal.Area > 20,]
head(big_area_iris)
head(df)
iris_chr <- iris[,as.character()] ###not working
iris_chr
iris_chr <- iris[,] ###not working
View(iris_chr)
seq(2,150,2) # here's the code to get a list of the even numbers between 2 and 150
df <- iris[seq(2,150,2),]
head(df)
# 2.  Create a new object called iris_chr which is a copy of iris, except where every column is a character class
iris_chr <- iris[,] ###not working
# 3.  Create a new numeric vector object named "Sepal.Area" which is the product of Sepal.Length and Sepal.Width
Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
class(Sepal.Area)
Sepal.Area
# 4.  Add Sepal.Area to the iris data frame as a new column
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
head(iris)
# 5.  Create a new dataframe that is a subset of iris using only rows where Sepal.Area is greater than 20
# (name it big_area_iris)
big_area_iris <- iris[Sepal.Area > 20,]
head(big_area_iris)
# 6.  Upload the last numbered section of this R script (with all answers filled in and tasks completed)
# to canvas
# I should be able to run your R script and get all the right objects generated
iris_chr <- as.character(iris) ###not working
iris_chr <- [,as.character]
iris_chr <- as.character(iris$Sepal.Length)
iris_chr <- as.character(iris$Sepal.Length)
iris_chr <- as.character(iris$Sepal.Length)
iris_chr <- iris
iris_chr <- as.character(iris$Sepal.Length)
iris_chr$Sepal.Length <- as.character(iris$Sepal.Length)
iris_chr <- iris
iris_chr$Sepal.Length <- as.character(iris$Sepal.Length)
View(iris_chr)
class(iris_chr$Sepal.Length)
